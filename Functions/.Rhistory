Dat2 = cbind(runif(50,0,1), runif(50,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2))
Cexs = sample(seq(3,10, length = 100), 50)
plot(Dat2, col = Cols, pch = 19, cex = Cexs)
set.seed(1010)
Dat2 = cbind(runif(50,0,1), runif(50,0,0.01))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2))
Cexs = sample(seq(3,10, length = 100), 50)
plot(Dat2, col = Cols, pch = 19, cex = Cexs)
set.seed(1010)
Dat2 = cbind(runif(50,0,1), runif(50,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2))
Cexs = sample(seq(3,10, length = 100), 50)
plot(Dat2, col = Cols, pch = 19, cex = Cexs)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-1,1))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.5,0.5))
Cexs = sample(seq(3,10, length = 100), 50)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.2,0.2))
set.seed(1010)
Dat2 = cbind(runif(100,0,1), runif(100,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2))
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.2,0.2))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.1,0.1.5))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.1,0.15))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.15))
Cols = rainbow(nrow(Dat2), alpha = 0.25)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.15))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.1))
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
Dat2 = cbind(runif(1000,0,1), runif(1000,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2), alpha = 0.25)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
set.seed(1010)
Dat2 = cbind(runif(5000,0,1), runif(5000,0,0.1))
Cols = rainbow(nrow(Dat2), alpha = 0.25)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
set.seed(1010)
Dat2 = cbind(runif(500,0,1), runif(500,0,0.1))
#Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2), alpha = 0.25)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
set.seed(1010)
Dat2 = cbind(runif(500,0,1), runif(500,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = rainbow(nrow(Dat2), alpha = 0.25)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
display.brewer.all()
?brewer.pal
set.seed(1010)
Dat2 = cbind(runif(500,0,1), runif(500,0,0.1))
Dat2 = Dat2[ order(Dat2[,1]),]
Cols = brewer.pal(4, "Set1")
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
Cols = colorRamp(brewer.pal(4, "Set1"))[500]
Cols = colorRamp(brewer.pal(4, "Set1"), alpha = 0.25)
Cols
Cols = colorRamp(brewer.pal(4, "Set1"), alpha = 0.25)(500)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
Cols
brewer.pal(4, "Set1")
Cols = colorRamp(brewer.pal(4, "Set1"))(500)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
?colorRamp
Cols = colorRampPalette(brewer.pal(4, "Set1"))(500)
Cexs = sample(seq(3,10, length = 200), 100)
plot(Dat2, col = Cols, pch = 19, cex = Cexs,
ylim = c(-0.01,0.2))
P0 <- 8 # Initial condition
p <- rep(P0, maxY)
maxY <- 11 # Number of years
R <- 0.3 # Intrinsic growth
K <- 100 # Carrying cap
p <- rep(P0, maxY)
for (t in 1:(MAX.Y-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
plot(p)
Rvar = rnorm(length(maxY), sd = 0.3)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
plot(p)
P0 <- 8 # Initial condition
maxY <- 50 # Number of years
R <- 0.3 # Intrinsic growth
K <- 100 # Carrying cap
p <- rep(P0, maxY)
Rvar = rnorm(length(maxY), sd = 0.3)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
plot(p)
Rvar = rnorm(1:(maxY), sd = 0.3)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R * Rvar)  * (1-p[t]/K)*p[t]
}
plot(p)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R * Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.01)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.1)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
Rvar = rnorm(1:(maxY), sd = 0.3)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.3)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
R <- 0.1 # Intrinsic growth
Rvar = rnorm(1:(maxY), sd = 0.)
Rvar = rnorm(1:(maxY), sd = 0.1)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.1)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
p <- rep(P0, maxY) # Vector for p
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
plot(p)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.1)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.3)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
set.seed(1010)
Rvar = rnorm(1:(maxY), sd = 0.2)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p)
plot(p, type = "b")
plot(p, type = "b", cex = 0.5)
plot(p, type = "b", cex = 0.5, pch = 16)
B = 0.3 # Births
D = 0.1 # Deaths
R = 1 + B - D
R = B - D
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p, type = "b", cex = 0.5, pch = 16)
B = 0.3 # Births
Bvar = rnorm(1:maxY, sd = 0.1)
Bs = B + Bvar
Bs = B + Bvar ; Bs[Bs <= 0] <- 0
D = 0.1 # Deaths
R = B - D
R = Bs - D
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R[t] + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p, type = "b", cex = 0.5, pch = 16)
P0 <- 8 # Initial condition
P0 <- 1 # Initial condition
maxY <- 50 # Number of years
R <- 0.3 # Intrinsic growth
p <- rep(P0, maxY) # Vector for p
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + R*(1-p[t]/K)*p[t]
}
plot(p)
set.seed(1010)
Rvar = rnorm(1:maxY, sd = 0.2)
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p, type = "b", cex = 0.5, pch = 16)
B = 0.3 # Births
Bvar = rnorm(1:maxY, sd = 0.1)
Bs = B + Bvar ; Bs[Bs <= 0] <- 0
D = 0.1 # Deaths
R = Bs - D
for (t in 1:(maxY-1)){
p[t+1] <- p[t] + (R[t] + Rvar[t])  * (1-p[t]/K)*p[t]
}
plot(p, type = "b", cex = 0.5, pch = 16)
load("C:\Users\Shaunus\Google Drive\R stuff\Comparison_of_MVAbund_DeSeq2_EdgeR\Compare_data_MvaDesEdge.RData")
load("C:/Users/Shaunus/Google Drive/R stuff/Comparison_of_MVAbund_DeSeq2_EdgeR/Compare_data_MvaDesEdge.RData")
dim(CountData16S)
MetaData
library(mvabund)
Dat.mva = mvabund(CountData16S)
plot(Dat.mva)
plot(Dat.mva)
plot(Dat.mva ~ MetaData$oneway)
class(Dat.mva)
meanvar.plot(Dat.mva ~ MetaData$oneway)
abline(0,1)
Dat.nb = manyglm(Dat.mva ~ Species * Density, data = MetaData, family = "negative.binomial")
Totals = rowSums(CountData16S)
hist(Totals)
Dat.nb = manyglm(Dat.mva ~ Species * Density + offset(log(Totals)), data = MetaData, family = "negative.binomial")
Rand100 = sample(colnames(CountData16S), 1:100)
Rand100 = sample(colnames(CountData16S), 100)
plot.manyglm(Dat.nb, var.subset = Rand100)
plot.manyglm(Dat.nb, which = 1, var.subset = Rand100)
Rand100
plot.manyglm(Dat.nb, n.vars = 100)
plot.manyglm(Dat.nb, n.vars = 100)
plot.manyglm(Dat.nb, var.subset = Rand100[1:5])
?plot.manyglm
plot.manyglm(Dat.nb, var.subset = c(1,5,10))
Rand100 = sample(1:ncol(Dat.mva), 100)
plot.manyglm(Dat.nb, var.subset = Rand100)
load("C:/Users/Shaunus/Google Drive/R stuff/Comparison_of_MVAbund_DeSeq2_EdgeR/Compare_data_MvaDesEdge.RData")
dim(CountData16S)
MetaData
library(mvabund)
Dat.mva = mvabund(CountData16S)
class(Dat.mva)
Totals = rowSums(CountData16S)
Dat.nb = manyglm(Dat.mva ~ Species * Density + offset(log(Totals)), data = MetaData, family = "negative.binomial")
expand.grid(Species = levels(MetaData$Species), Density = levels(MetaData$Density))
GroupMeans = data.frame(expand.grid(Species = levels(MetaData$Species), Density = levels(MetaData$Density))
```
GroupMeans = expand.grid(Species = levels(MetaData$Species), Density = levels(MetaData$Density))
GroupMeans = expand.grid(Species = levels(MetaData$Species), Density = levels(MetaData$Density), Totals = 100)
GroupMeans
GroupsForPred = expand.grid(Species = levels(MetaData$Species), Density = levels(MetaData$Density), Totals = 100)
GroupsForPred
GroupMeansSE = predict.manyglm(Dat.nb, GroupMeansSE, se.fit = T)
GroupMeansSE = predict.manyglm(Dat.nb, GroupsForPred, se.fit = T)
GroupMeansSE$fit[,1:5]
GroupMeansSE$SE[,1:5]
GroupMeansSE$se.fit[,1:5]
?anova.manyglm
Dat.aov = anova.manyglm(Dat.nb, p.uni = "unadjusted", show.time = "all",
nBoot = 100)
library(rpart)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(XML)
library(httr)
install.packages("httr")
install.packages("httr")
install.packages("R2jags")
library(R2jags)
library(XML)
theurl <- getURL("https://www.playtogga.com/epl/players/p11334")
library(RCurl)
theurl <- getURL("https://www.playtogga.com/epl/players/p11334")
theurl
?getURL
theurl <- getURL("https://www.playtogga.com/epl/players/p11334", .opts = list(ssl.verifypeer = FALSE))
theurl
getURL("https://www.playtogga.com/epl/players/p11334", userpwd = "bob:duncantl")
getURL("https://www.playtogga.com/epl/players/p11334", userpwd = "shaunson26:shaun1139")
writeLines(theurl, file = "test.html")
writeLines(theurl, con = "test.html")
library(httr)
install.packages("httr")
login <- list(
amember_login = "shaunson26",
amember_pass  = "shaun1139",
amember_redirect_url = "https://www.playtogga.com/epl/players/p11334"
)
response <- POST(handle = handle, path = path, body = login)
theurl <- getURL("https://www.playtogga.com/epl/players/p11334")
curl = getCurlHandle()
curlSetOpt(cookiejar="",  useragent = agent, followlocation = TRUE, curl=curl)
agent="Mozilla/5.0" #or whatever
curlSetOpt(cookiejar="",  useragent = agent, followlocation = TRUE, curl=curl)
html=postForm(loginurl, .params = pars, curl=curl)
pars=list(
username="shaunson26"
password="shaun1139"
)
pars=list(
username="shaunson26",
password="shaun1139"
)
html=postForm(loginurl, .params = pars, curl=curl)
loginurl = "https://www.playtogga.com"
dataurl  = "https://www.playtogga.com/epl/players/p11334"
html=postForm(loginurl, .params = pars, curl=curl)
?postForm
theurl <- getURL("http://tog.ga/a/key_live_eodDXefOpqCDtcyfIl8NImkiCzph2CvL?%24identity_id=426735480558742898")
theurl <- getURL("http://tog.ga/a/key_live_eodDXefOpqCDtcyfIl8NImkiCzph2CvL?%24identity_id=426735480558742898")
install.packages("RSelenium")
library(RSelenium)
library(XML)
# Check and start servers for Selenium
checkForServer()
startServer()
remote_driver <- remoteDriver(browserName="firefox", port=4444)
remote_driver$open(silent=T)
?rsDriver
rD <- rsDriver(, browers = "firefox")
epl_link <- "https://fantasy.premierleague.com/a/entry/767830/history"
remote_driver$navigate(epl_link)
rD <- rsDriver(browers = "firefox")
rD[["server"]]$stop()
rD <- rsDriver(browers = "firefox", port = 4444)
rD <- rsDriver(browers = "firefox", port = 4444L)
library(RSelenium)
rD <- rsDriver(port = 4444L)
rDr$open()
rD$open()
rD$navigate("http://www.google.com/ncr")
navigate("http://www.google.com/ncr")
rD$client$navigate("http://www.google.com/ncr")
rD$client$navigate("http://www.togga.com")
rD$client$navigate("http://www.playtogga.com")
rD$client$click
rD$client$click()
rD$client$click()
library(RSelenium)
rD <- rsDriver(port = 4444L)
rD$client$navigate("http://www.playtogga.com")
rD$client$navigate("http://www.playtogga.com")
rD$client$navigate("https://www.playtogga.com/epl/players/p9089")
elem <- remote_driver$findElement(using="class", value="stats")
rD$client$findElement(using="class", value="stats")
library(RSelenium)
rD <- rsDriver(port = 4444L)
rD$client$navigate("https://www.playtogga.com/epl/players/p9089")
library(RSelenium)
# Check and start servers for Selenium
rD <- rsDriver(port = 4444L)
rD$client$navigate("http://www.playtogga.com")
rD$client$navigate("https://www.playtogga.com/epl/players/p9089")
aa = rD$client$findElement(using="class", value="stats")
# Import packages
library(RSelenium)
# Check and start servers for Selenium
rD <- rsDriver(port = 4444L)
rD$client$navigate("http://www.playtogga.com")
install.packages("diveRsity")
library(diveRsity)
?fastDivPart
est_result <- fastDivPart(infile = 'mydata', outfile = "myresults',
gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 1000,
plot = TRUE)
test_result <- fastDivPart(infile = "mydata", outfile = "myresults", gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 1000,
plot = TRUE)
data(Test_data, package = "diveRsity")
View(Test_data)
test_result <- fastDivPart(infile = Test_data, outfile = "myresults", gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 1000,
plot = TRUE)
str(Test_data)
View(Test_data)
levels(Test_data$X1)
pops = c("pop1,"   "pop2,"   "pop3,"   "pop4,"   "pop5,"   "pop6,")
write.csv(Test_data, file = "TestData.csv")
Test_data = read.csv("TestData.csv")
fastDivPart(Test_data)
fastDivPart(infile = Test_data,
gp = 3, pairwise = TRUE, bs_locus = F,
bs_pairwise = TRUE, boots = 1,
plot = TRUE)
fastDivPart(infile = Test_data,
gp = 3, pairwise = TRUE, bs_locus = F,
bs_pairwise = TRUE, boots = 2,
plot = TRUE)
data(Test_data, package = "diveRsity")
fastDivPart(infile = Test_data,
gp = 3, pairwise = TRUE, bs_locus = T,
bs_pairwise = TRUE, boots = 2,
plot = TRUE)
test_result <- fastDivPart(infile = 'mydata', outfile = "myresults',
gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 10,
plot = TRUE)
test_result <- fastDivPart(infile = "mydata", outfile = "myresults",
gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 10,
plot = TRUE)
test_result <- fastDivPart(infile = Test_data, outfile = "myresults",
gp = 3, pairwise = TRUE, bs_locus = TRUE,
bs_pairwise = TRUE, boots = 10,
plot = TRUE)
test_result$standard
test_result$estimate
test_result$pairwise
test_result$meanPairwise
test_result$bs_locus
test_result$pairwise$gstEst
gstEst.pw = as.dist(test_result$pairwise$gstEst)
gstEst.pw
hclust(gstEst.pw)
plot(hclust(gstEst.pw))
View(Test_data)
View(Test_data)
?rpois()
rpois(0:5, 0.916)
ppois(0:5, 0.916)
qppois(0:5, 0.916)
qpois(0:5, 0.916)
dpois(0:5, 0.916)
dpois(0:5, 0.223)
combn(0:5, 2)
aa = combn(0:5, 2, )
aa = dpois(0:5, 0.916)
ab = dpois(0:5, 0.223)
cc = combn(0:5, 2, )
aa[cc[1,]]
ab[cc[2,]]
aa[cc[1,]] * ab[cc[2,]]
aa = dpois(0:5, 0.916)
ab = dpois(0:5, 0.223)
cc = combn(0:5, 2, )
aa[cc[1,]] * ab[cc[2,]]
ab
aa
t(aa[cc[1,]]) * t(ab[cc[2,]])
aa[cc[1,]])
aa[cc[1,]]
ab[cc[2,]]
cc = combn(0:5, 2) + 1
aa[cc[1,]]
ab[cc[2,]]
aa[cc[1,]] * ab[cc[2,]]
aa = dpois(0:3, 0.916)
ab = dpois(0:3, 0.223)
cc = combn(0:3, 2) + 1
aa[cc[1,]] * ab[cc[2,]]
(aa[cc[1,]] * ab[cc[2,]]) * 100
cc
a = 0.5
b = 0.1
-log(1-(a+b)/2)
lamba = -log(1-(a+b)/2)
dpois(0:5, lamba)
dpois(0:5, lamba) * 100
lamba = -log(1-(a)/2)
dpois(0:5, lamba) * 100
lamba = -log(1-a/2)
lamba = -log(1-0.3)
dpois(0:3, lamba) * 100
lamba30 = -log(1-0.3)
dpois(0:3, lamba30) * 100
dpois30 = dpois(0:3, lamba30) * 100
barplot(dpois30)
names(dpois30) = c(0, 1, 2, 3)
barplot(dpois30)
-log(1-1.1)
lamba99 = -log(1-0.99)
dpois(0:3, lamba99) * 100
dpois99 = dpois(0:3, lamba99) * 100
barplot(dpois99)
dpois99 = dpois(0:10, lamba99) * 100
barplot(dpois99)
lamba99 = -log(1-0.5)
dpois99 = dpois(0:10, lamba99) * 100
barplot(dpois99)
# 30 % chance
lamba30 = -log(1-0.3)
dpois30 = dpois(0:3, lamba30) * 100
names(dpois30) = c(0, 1, 2, 3)
barplot(dpois30)
dpois30
cumsum(dpois30)
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga/Functions/")
for (f in list.files(pattern="*.R")) {
source(f)
}
