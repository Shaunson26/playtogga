myDatQQ[1:5,1:5]
myDatDen = getDensities(myDatQQ)
plotDensities(myDatDen)
meanQQ = getMeanQuantiles(myDatQQ)
meanDensity = density(meanQQ)
lines(x = meanDensity$x, y = meanDensity$y, col = 2, lwd = 2)
meanDensity2 = getMeanDensities(myDatDen)
lines(x = meanDensity2$xMeans, y = meanDensity2$yMeans, col = 3, lwd = 2)
aa = density(myDat)
lines(x = aa$x, y = aa$y, col = 4, lwd = 2)
myDat = rpois(10, 3) + rpois(5,1) + rpois(5,4)
myDatQQ = bootQuantiles(myDat, nBoots = 100)
myDatDen = getDensities(myDatQQ)
plotDensities(myDatDen)
meanQQ = getMeanQuantiles(myDatQQ)
meanDensity = density(meanQQ)
lines(x = meanDensity$x, y = meanDensity$y, col = 2, lwd = 2)
meanDensity2 = getMeanDensities(myDatDen)
lines(x = meanDensity2$xMeans, y = meanDensity2$yMeans, col = 3, lwd = 2)
aa = density(myDat)
lines(x = aa$x, y = aa$y, col = 4, lwd = 2)
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga/Functions/")
for (f in list.files(pattern="*.R")) {
source(f)
}
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga/Data/")
eventScores = read.csv("eventScores.csv", row.names = 1)
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs")
myFiles = list.files()
allPlayerList = getIndividualPlayerTables(myFiles)
allPlayerWk2 = lapply(allPlayerList, function(x) x[1:2,])
lapply(allPlayerList, function(x) grep("@CRY", x$OPP))
lapply(allPlayerWk2, function(x) grep("@CRY", x$OPP))
allPlayerWk2$`A. Ayew`
lapply(allPlayerWk2, function(x) x[grep("CRY", x$OPP),])
do.call(rbind, lapply(allPlayerWk2, function(x) x[grep("CRY", x$OPP),]))
CRY = do.call(rbind, lapply(allPlayerWk2, function(x) x[grep("CRY", x$OPP),]))
is.na(CRY$PTS)
CRY = CRY[!is.na(CRY$PTS),]
CRY
sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:3)]))
t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:3)])))
CRYwks = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:3)])))
rowMeans(CRYwks)
colMeans(CRYwks)
colMeans(CRYwks)
allPlayerWk2$`A. Ayew`
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga/Data")
load("playerNamesURLs_Aug2017.RData")
View(playerNameURL)
playerNameURL$Team == "WHU"
row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU
allPlayerWk2[WHU]
do.call(rbind, allPlayerWk2[WHU])
WHU = do.call(rbind, allPlayerWk2[WHU])
WHUwks = t(sapply(1:2, function(x) colSums(WHU[WHU$GW == x, -(1:3)])))
WHUwks
WHUwks = t(sapply(1:2, function(x) WHU[WHU$GW == x, -(1:3)]))
WHUwks
WHUwks = sapply(1:2, function(x) WHU[WHU$GW == x, -(1:3)])
WHUwks
WHUwks = lapply(1:2, function(x) WHU[WHU$GW == x, -(1:3)])
WHUwks
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU
WHU = allPlayerWk2[WHU]
WHU
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = do.call(rbind, allPlayerWk2[WHU])
WHU
WHUwks = lapply(1:2, function(x) WHU[WHU$GW == x, -(1:3)])
WHUwks
lapply(WHUwks, function(x) t(x)/colSums(x))
lapply(WHUwks, function(x) t(t(x)/colSums(x)))
lapply(WHUwks, function(x) t(t(x+1)/colSums(x+1)))
lapply(WHUwks, function(x) round(t(t(x+1)/colSums(x+1)), 2))
lapply(WHUwks, function(x) round(t(t(x)/colSums(x+1)), 2))
lapply(WHUwks, function(x) round(t(t(x+1)/colSums(x)), 2))
lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
WHUpro =lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
allPlayerWk2
pW2 = allPlayerWk2[1:2]
pW2
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
plotAllPlayerDistributions(pW2Glms)
mostLikelyStatistics(pW2Glms)
qqScoresList = getPlayerQuantiles(pW2Glms, pW2, quantiles = c(10,50,90))
qqScoresList
WHUpro
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = do.call(rbind, allPlayerWk2[WHU])
WHU
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU])
WHU = allPlayerWk2[WHU]
WHU
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
allPlayerWk2 = lapply(allPlayerList, function(x) x[1:2,])
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
WHU
allPlayerWk2
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
WHU
WHU
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU
WHU = allPlayerWk2[WHU]
WHU
lapply(1:2, function(x) lapply(WHU, function(y) y[x,]))
lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,])))
WHUwks = lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,-(1:3)])))
WHUwks = lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,-(1:3)])))
WHUwks
WHUpro =lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
WHUpro
do.call(c, lapply(WHUpro, function(x) row.names(x)))
unique(do.call(c, lapply(WHUpro, function(x) row.names(x))))
namesUni = unique(do.call(c, lapply(WHUpro, function(x) row.names(x))))
lapply(namesUni, function(x) lapply(WHUpro, function(y) y[x,]))
lapply(namesUni, function(x) do.call(rbind, lapply(WHUpro, function(y) y[x,])))
lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,]))))
lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T))
do.call(rbind, lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T)))
WHUpro = do.call(rbind, lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T)))
row.nameS(WHUpro) <- namesUni
row.names(WHUpro) <- namesUni
WHUpro
allPlayerWk2 = lapply(allPlayerList, function(x) x[1:2,])
CRY = do.call(rbind, lapply(allPlayerWk2, function(x) x[grep("CRY", x$OPP),]))
CRY
CRY = CRY[!is.na(CRY$PTS),]
CRYwks = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:3)])))
CRYwks
CRYwks = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)])))
fitPoissonGLM(CRYwks)
fitAllStatPoissonGLMs(CRYwks)
CRYwks = list(CRY = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)]))))
fitAllStatPoissonGLMs(CRYwks)
cFit = fitAllStatPoissonGLMs(CRYwks)
plotOnePlayerDistributions(cFit)
plotAllPlayerDistributions(cFit)
CRYwks
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:12)
cFit$CRY
CRYwks
glm(CRYwks[, "AER"] ~ 1)
glm(CRYwks$CRY[, "AER"] ~ 1)
cFit$CRY[["AER"]]
cFit$CRY[[7]]
cFit$CRY[[6]]
cFit
CRYwks
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:12)
glm(CRYwks$CRY[, "G"] ~ 1)
cFit$CRY[[1]]
CRYwks
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:12)
cFit[[1]]
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
CRYwks
CRYwks$CRY[, vars]
lapply(CRY, function(x) x[, vars])
lapply(CRYwks, function(x) x[, vars])
lapply(CRYwks$CRY, function(x) x[, vars])
CRYwks
CRYwks = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)])))
CRYwks
lapply(vars, function(x) CRYwks[,x])
pW2
CRYwks = list(CRY = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)]))))
CRYwks
fitAllStatPoissonGLMs(CRYwks)
aa = fitAllStatPoissonGLMs(CRYwks)
aa$CRY[[1]]$glmOut$y
CRYwks
aa$CRY[[2]]$glmOut$y
CRYwks
lapply(CRYwks, function(x) x[, vars])
lapply(CRYwks, function(x) x[, 1:5])
lapply(CRYwks, function(x) lapply(x, function(y) fitPoissonGLM(y, varRange)))
varRange = 0:12
lapply(CRYwks, function(x) lapply(x, function(y) fitPoissonGLM(y, varRange)))
CRYwks
lapply(CRYwks, function(x) lapply(vars, function(y) fitPoissonGLM(x[ y], varRange)))
CRYwks$CRY
rbind(CRYwks$CRY,1)
CRYwks$CRY = rbind(CRYwks$CRY,1)
lapply(CRYwks, function(x) lapply(vars, function(y) fitPoissonGLM(x[ y], varRange)))
CRYwks = list(CRY = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)]))))
CRYwks
lapply(CRYwks, function(x) lapply(vars, function(y) fitPoissonGLM(x[,y], varRange)))
## Poisson many fitters
fitAllStatPoissonGLMs <- function(allPlayerList, varRange = 0:10){
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
pWStat = lapply(allPlayerList, function(x) x[, vars])
lapply(pWStat, function(x) lapply(vars, function(y) fitPoissonGLM(x[,y], varRange)))
}
aa = lapply(CRYwks, function(x) lapply(vars, function(y) fitPoissonGLM(x[,y], varRange)))
bb = fitAllStatPoissonGLMs(CRYwks)
identical(aa, bb)
aa$CRY
aa$CRY[[7]]
aa$CRY[[1]]
aa$CRY[[1]]$glmOut$y
CRYwks
aa$CRY[[2]]$glmOut$y
aa$CRY[[3]]$glmOut$y
plotAllPlayerDistributions(cFit)
cFit = lapply(CRYwks, function(x) lapply(vars, function(y) fitPoissonGLM(x[,y], varRange)))
plotAllPlayerDistributions(cFit)
cFit = fitAllStatPoissonGLMs(CRYwks)
plotAllPlayerDistributions(cFit)
CRYwks
cFit$CRY[[7]]
cFit$CRY[[7]]$glmOut$y
dpois(0:12, 2.6)
barplot(dpois(0:12, 2.6))
exp(2.6)
barplot(dpois(0:12, exp(2.6)))
barplot(dpois(0:20, exp(2.6)))
rpois(10, 2.6)
rpois(10, exp(2.6))
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:40)
plotAllPlayerDistributions(cFit)
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:40)
plotAllPlayerDistributions(cFit)
cFit$CRY[[7]]$glmOut$y
cFit$CRY[[7]]$outPcnt
barplot(cFit$CRY[[7]]$outPcnt)
datIn = t(do.call(rbind, lapply(cFit, function(x) x$outPcnt)))
cFit
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:40)
cFit
cFit
datIn = t(do.call(rbind, lapply(cFit$CRY, function(x) x$outPcnt)))
colnames(datIn) = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
datInStack = stack(as.data.frame(datIn))
datInStack
datInStack$hits = as.numeric(row.names(datIn))
barchart(values ~ hits | ind, data = datInStack,
main = main, xlab = "Hits", ylab = "% likelihood",
layout = c(6,3), between = list(x = 0.5, y = 0.5),
scales = list(alternating = F, x = list(rot = 90, labels = 0:20, at = 1:21)),
horizontal = F)
barchart(values ~ hits | ind, data = datInStack,
main = NULL, xlab = "Hits", ylab = "% likelihood",
layout = c(6,3), between = list(x = 0.5, y = 0.5),
scales = list(alternating = F, x = list(rot = 90, labels = 0:20, at = 1:21)),
horizontal = F)
plotOnePlayerDistributions(cFit)
plotOnePlayerDistributions(cFit$CRY)
plotOnePlayerDistributions(cFit$CRY)
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:30)
plotOnePlayerDistributions(cFit$CRY)
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:25)
plotOnePlayerDistributions(cFit$CRY)
plotAllPlayerDistributions <- function(allPlayerGLMs){
playerNames = names(allPlayerGLMs)
for(i in 1:length(playerNames)){
plotOnePlayerDistributions(pW2Glms[[i]], main = playerNames[i])
}
}
plotOnePlayerDistributions <- function(myFit, main = NULL, ...){
require(lattice)
datIn = t(do.call(rbind, lapply(myFit, function(x) x$outPcnt)))
colnames(datIn) = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
datInStack = stack(as.data.frame(datIn))
datInStack$hits = as.numeric(row.names(datIn))
print(
barchart(values ~ hits | ind, data = datInStack,
main = main, xlab = "Hits", ylab = "% likelihood",
layout = c(6,3), between = list(x = 0.5, y = 0.5),
scales = list(alternating = F, x = list(rot = 90, labels = 0:40, at = 1:41)),
horizontal = F)
)
}
CRYwks = list(CRY = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)]))))
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:25)
plotOnePlayerDistributions(cFit$CRY)
CRYwks$CRY = rbind(CRYwks$CRY, 0)
CRYwks$CRY
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:25)
plotOnePlayerDistributions(cFit$CRY)
mostLikelyStatistics(cFit)
CRYwks
CRY = do.call(rbind, lapply(allPlayerWk2, function(x) x[grep("CRY", x$OPP),]))
CRY = CRY[!is.na(CRY$PTS),]
CRYwks = list(CRY = t(sapply(1:2, function(x) colSums(CRY[CRY$GW == x, -(1:4)]))))
cFit = fitAllStatPoissonGLMs(CRYwks, varRange = 0:25)
plotOnePlayerDistributions(cFit$CRY)
cFit$CRY
mostLikelyStatistics(cFit)
CRYwks
colMeans(CRYwks$CRY)
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga/Data")
load("playerNamesURLs_Aug2017.RData")
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
WHUwks = lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,-(1:3)])))
WHUpro =lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
namesUni = unique(do.call(c, lapply(WHUpro, function(x) row.names(x))))
WHUpro = do.call(rbind, lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T)))
row.names(WHUpro) <- namesUni
WHUpro
is.nan[WHUpro]
WHUpro
is.nan(WHUpro)
WHUpro[is.nan(WHUpro)] <- 0
WHUpro
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
WHUwks = lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,-(1:4)])))
WHUpro =lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
namesUni = unique(do.call(c, lapply(WHUpro, function(x) row.names(x))))
WHUpro = do.call(rbind, lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T)))
row.names(WHUpro) <- namesUni
WHUpro[is.nan(WHUpro)] <- 0
WHUpro
cryMLS = mostLikelyStatistics(cFit)
t(WHUpro)
cryMLS
t(WHUpro) * cryMLS
t(WHUpro)
t(WHUpro) * as.numeric(cryMLS)
round(t(WHUpro) * as.numeric(cryMLS), 2)
t(round(t(WHUpro) * as.numeric(cryMLS), 2))
pBT = t(round(t(WHUpro) * as.numeric(cryMLS), 2))
pBT = list(pBT = t(round(t(WHUpro) * as.numeric(cryMLS), 2)))
calculateBytoggaScores(pBT, eventScores)
pBT
pW2 = allPlayerWk2[1:2]
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
plotAllPlayerDistributions(pW2Glms)
mostLikelyStatistics(pW2Glms)
qqScoresList = getPlayerQuantiles(pW2Glms, pW2, quantiles = c(10,50,90))
qqScoresList
calculateBytoggaScores(qqScoresList, eventScores)
pBT
str(pBT$pBT)
pBT = list(pBT = data.frame(t(round(t(WHUpro) * as.numeric(cryMLS), 2))))
str(pBT$pBT)
calculateBytoggaScores(pBT, eventScores)
pBT$pBT
pBT$pBT$POS = sample(unique(playerNameURL$Position), 14, replace = T)
str(pBT$pBT)
calculateBytoggaScores(pBT, eventScores)
allPlayerWk2 = lapply(allPlayerList, function(x) x[1:2,])
pW2 = allPlayerWk2[1:2]
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
plotAllPlayerDistributions(pW2Glms)
mostLikelyStatistics(pW2Glms)
qqScoresList = getPlayerQuantiles(pW2Glms, pW2, quantiles = c(10,50,90))
calculateBytoggaScores(qqScoresList, eventScores)
qqScoresList
mostLikelyStatistics(pW2Glms)
## Poisson many fitters
fitAllStatPoissonGLMs <- function(allPlayerList, varRange = 0:10){
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
pWStat = lapply(allPlayerList, function(x) x[, vars])
lapply(pWStat, function(x) {
playerFits = lapply(vars, function(y) fitPoissonGLM(x[,y], varRange))
names(playerFits) = vars}
)
}
## Poisson fitter
fitPoissonGLM <- function(x, varRange = 0:5){
glmOut = glm(x ~ 1, family = poisson)
lamdaFit = coefficients(glmOut)
outPcnt = dpois(varRange, exp(lamdaFit)) * 100
names(outPcnt) = varRange
return(list(glmOut = glmOut, lamdaFit = lamdaFit, outPcnt = outPcnt))
}
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
pW2Glms$`A. Ayew`[[1]]
## Poisson many fitters
fitAllStatPoissonGLMs <- function(allPlayerList, varRange = 0:10){
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
pWStat = lapply(allPlayerList, function(x) x[, vars])
lapply(pWStat, function(x) {
playerFits = lapply(vars, function(y) fitPoissonGLM(x[,y], varRange))
names(playerFits) = vars
return(playerFits)}
)
}
## Poisson fitter
fitPoissonGLM <- function(x, varRange = 0:5){
glmOut = glm(x ~ 1, family = poisson)
lamdaFit = coefficients(glmOut)
outPcnt = dpois(varRange, exp(lamdaFit)) * 100
names(outPcnt) = varRange
return(list(glmOut = glmOut, lamdaFit = lamdaFit, outPcnt = outPcnt))
}
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
plotAllPlayerDistributions(pW2Glms)
mostLikelyStatistics(pW2Glms)
qqScoresList = getPlayerQuantiles(pW2Glms, pW2, quantiles = c(10,50,90))
qqScoresList
calculateBytoggaScores(qqScoresList, eventScores)
calculateBytoggaScores(pBT, eventScores)
WHU = row.names(playerNameURL)[playerNameURL$Team == "WHU"]
WHU = WHU[ !is.na(WHU)]
WHU = allPlayerWk2[WHU]
WHUwks = lapply(1:2, function(x) do.call(rbind, lapply(WHU, function(y) y[x,-(1:4)])))
WHUpro =lapply(WHUwks, function(x) round(t(t(x)/colSums(x)), 2))
namesUni = unique(do.call(c, lapply(WHUpro, function(x) row.names(x))))
WHUpro = do.call(rbind, lapply(namesUni, function(x) colMeans(do.call(rbind, lapply(WHUpro, function(y) y[x,])), na.rm = T)))
row.names(WHUpro) <- namesUni
WHUpro[is.nan(WHUpro)] <- 0
pBT = list(pBT = data.frame(t(round(t(WHUpro) * as.numeric(cryMLS), 2))))
pBT$pBT$POS = sample(unique(playerNameURL$Position), 14, replace = T)
str(pBT$pBT)
calculateBytoggaScores(pBT, eventScores)
pBT, eventScores
pBT
pBT$pBT$POS = sample(levels(playerNameURL$Position), 14, replace = T)
pBT
calculateBytoggaScores(pBT, eventScores)
calculateBytoggaScores(qqScoresList, eventScores)
teamNames = levels(playerNameURL$Team)
teamNames
teamNames = unique(playerNameURL$Team)
teamNames
teamNames = unique(playerNameURL$Team) ; teamNames = teamNames[ !is.na(teamNames)]
aa = lapply(teamNames, function(tn) {
do.call(rbind, lapply(allPlayerWk2, function(x) x[grep(tn, x$OPP),]))})
aa[[1]]
aa = lapply(teamNames, function(tn) {
teamMat =  do.call(rbind, lapply(allPlayerWk2, function(x) x[grep(tn, x$OPP),]))
teamMat = teamMat[!is.na(teamMat$PTS),]
})
aa[[1]]
againstTeamStats = lapply(teamNames, function(tn) {
teamMat =  do.call(rbind, lapply(allPlayerWk2, function(x) x[grep(tn, x$OPP),]))
teamMat = teamMat[!is.na(teamMat$PTS),]
})
gameWeeks = 1:2
aa = lapply(againstTeamStats, function(ats){
list(ats = t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)]))))
})
aa[[1]]
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
list(ats = t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)]))))
})
gameWeekAgainstPoints[[1]]
gameWeekAgainstPoints[[2]]
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
list(t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)]))))
})
gameWeekAgainstPoints[[1]]
gameWeekAgainstPoints[[2]]
againstTeamStats[[1]]
names(againstTeamStats) <- teamNames
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
list(t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)]))))
})
gameWeekAgainstPoints$MUN
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)])))
})
gameWeekAgainstPoints$MUN
againstTeamStats
gameWeekAgainstPoints$MUN
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
gWAP =  t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)])))
gcReal = t(sapply(gameWeeks), function(x) max(ats[ats$GW == x,  "GC"]))
gWAP[, "GC"] <- gcReal
return(gWAP)
})
gameWeekAgainstPoints = lapply(againstTeamStats, function(ats){
gWAP =  t(sapply(gameWeeks, function(x) colSums(ats[ats$GW == x, -(1:4)])))
gcReal = t(sapply(gameWeeks, function(x) max(ats[ats$GW == x,  "GC"])))
gWAP[, "GC"] <- gcReal
return(gWAP)
})
gameWeekAgainstPoints$MUN
gameWeekAgainstPoints$WBA
cFit = fitAllStatPoissonGLMs(gameWeekAgainstPoints, varRange = 0:25)
cFit$MUN
plotOnePlayerDistributions(cFit$MUN)
cFit$MUN
gameWeekAgainstPoints$MUN
cFit = fitAllStatPoissonGLMs(gameWeekAgainstPoints, varRange = 0:40)
plotOnePlayerDistributions(cFit$MUN)
mostLikelyStatistics(cFit)
sapply(cFit, funtion(x) colMeans(x))
sapply(cFit, function(x) colMeans(x))
sapply(1:lengthcFit, function(x) colMeans(cFit[[x]]))
sapply(1:length(cFit), function(x) colMeans(cFit[[x]]))
gameWeekAgainstPoints
sapply(1:length(gameWeekAgainstPoints), function(x) colMeans(gameWeekAgainstPoints[[x]]))
cryMLS = mostLikelyStatistics(cFit)
t(sapply(1:length(gameWeekAgainstPoints), function(x) colMeans(gameWeekAgainstPoints[[x]])))
cryMLS = mostLikelyStatistics(cFit)
mostLikelyStatistics(cFit)
mostLikelyStatistics(cFit)
t(sapply(1:length(gameWeekAgainstPoints), function(x) colMeans(gameWeekAgainstPoints[[x]])))
cryMLS
