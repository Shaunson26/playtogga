do.call(rbind,
lapply(myFit, function(y) {
do.call(c,
lapply(y, function(x){
cumsumPcnts = cumsum(x$outPcnt)
as.numeric(names(x$outPcnt[cumsumPcnts > quantileThreshold][1]))
}))
})
)
}
mostLikelyStatistics(pW2Glms)
qqScoresList = getPlayerQuantitles(pW2Glms, pW2, quantitles = c(10,50,90))
qqScoresList = getPlayerQuantitles(pW2Glms, pW2, quantitles = c(10,50,90))
qqScoresList
aa = qqScoresList[[2]]
aa
aa$POS[1]
eventScores[,aa$POS[1]]
View(eventScores)
eventScores[,aa$POS[2]]
a$POS[2]
aa$POS[2]
aa
colnames(aa)
eventScores[ colnames(aa), aa$POS[2] ]
eventScores[ colnames(aa)[-1], aa$POS[2] ]
aa[1,-1]
aa[1,-1] * eventScores[ colnames(aa)[-1], aa$POS[1] ]
eventScores[ colnames(aa)[-1], aa$POS[1] ]
aa[1,-1]
aa[1,-1] * eventScores[ colnames(aa)[-1], aa$POS[1] ]
cbind(aa[1,-1],eventScores[ colnames(aa)[-1], aa$POS[1] ])
eventScores[ colnames(aa)[-1], aa$POS[1] ]
aa[1,-1] * eventScores[ colnames(aa)[-1], aa$POS[1] ])
aa[1,-1]
eventScores[ colnames(aa)[-1], aa$POS[1] ]
aa[1,-1] * eventScores[ colnames(aa)[-1], aa$POS[1] ]
View(eventScores)
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
aa[, vars]
aa
posIn = aa$POS
datIn = aa[, vars]
datIn
datIn[, vars]
eventScores[ vars, aa$POS ]
datIn[, vars] * eventScores[ vars, aa$POS ]
nrow(aa)
x = 1
posIn = aa$POS[x]
posIn
datIn = aa[ x, vars]
datIn
datIn[, vars] * eventScores[ vars, posIn ]
sapply(1:nrow(aa), function(x){
posIn = aa$POS[x]
datIn = aa[ x, vars]
datIn[, vars] * eventScores[ vars, posIn ]
})
lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
row.names(datOut) = row.names(x)
datOut
})
lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
row.names(datOut) = row.names(x)
rowSums(datOut)
})
lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
row.names(datOut) = row.names(x)
as.numeric(datOut)
})
aa = lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
row.names(datOut) = row.names(x)})
aa$Q10
aa = lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
row.names(datOut) = row.names(x)
datOut})
aa$Q10
aa$Q50
class(aa$Q50)
class(aa$Q50[,1])
as.matrix(aa$Q50)
rowSums(as.matrix(aa$Q50))
rowSums(as.matrix.default(aa$Q50))
rowSums(as.matrix.data.frame(aa$Q50))
as.matrix.data.frame(aa$Q50)
aa = lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
datOut = as.matrix.data.frame(datOut)
row.names(datOut) = row.names(x)
datOut})
aa
aa = lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
datOut = as.matrix.data.frame(datOut)
row.names(datOut) = row.names(x)
rowSums(datOut)})
aa
calculateBytoggaScores <- function(qqScoresList, eventScores){
vars = c("G","A","CC","SCR","SOT","STO","AER","CLR","CS","INT","PS","SV","TW","DIS","GC","OG","YC","RC")
lapply(qqScoresList, function(x){
datOut = t(sapply(1:nrow(x), function(y){
posIn = x$POS[y]
datIn = x[ y, vars]
datIn[, vars] * eventScores[ vars, posIn ]
}))
datOut = as.matrix.data.frame(datOut)
row.names(datOut) = row.names(x)
rowSums(datOut)
})
}
calculateBytoggaScores(qqScoresList, eventScores)
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
allPlayerWk2Mat = do.call(rbind, allPlayerWk2)
allPlayerWk2Mat = droplevels(allPlayerWk2Mat[ !is.na(allPlayerWk2Mat$PTS),])
allPlayerWk2Mat = droplevels(allPlayerWk2Mat[allPlayerWk2Mat$OPP %in% names(which(table(allPlayerWk2Mat$OPP) > 1)),])
leagueFit = lapply(5:22, function(x) fitPoissonGLM(allPlayerWk2Mat[,x], 0:12))
fitLM1 = lm(PTS ~ ., data = allPlayerWk2Mat[,c(1,4:22)])
qqScorePredictions = sapply(qqScoresList, function(x){ predict(fitLM1, x)})
qqScorePredictions
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga")
source("Functions/downloadPlayerHTMLs.R")
load("Data/playerNamesURLs_Aug2017.RData")
head(playerNameURL)
source("Functions/getIndividualPlayerTables.R")`
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs")
allPlayerList = getIndividualPlayerTables(playerHTMLs)
source("Functions/getIndividualPlayerTables.R")
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs")
playerHTMLs = list.files()
allPlayerList = getIndividualPlayerTables(playerHTMLs)
allPlayerList[1:2]
allPlayerWk1_2 = lapply(allPlayerList, function(x) x[1:2,])
allPlayerWk1_2[1:5]
playersWanted = 1:30
pW2 = allPlayerWk2[playersWanted]
pW2 = allPlayerWk1_2[playersWanted]
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga")
source("Functions/fitPoissonGLM.R")
pW2Glms = fitAllStatPoissonGLMs(pW2, varRange = 0:12)
pW2Glms$`A. Ayew`
attributes(pW2Glms$`A. Ayew`)
pW2Glms$`A. Ayew`$G
source("Functions/plotDistributions.R")
plotOnePlayerDistributions(pW2Glms$`A. Ayew`)
plotOnePlayerDistributions(pW2Glms$`A. Ayew`, main = "A. Ayew")
plotAllPlayerDistributions(pW2Glms[1:2])
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs")
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs")
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs/")
playerHTMLs = list.files(pattern = ".HTML")
allPlayerList = getIndividualPlayerTables(playerHTMLs)
playerHTMLs
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs/")
list.files(pattern = ".HTML")
setwd("C:/Users/Shaunus/Desktop/Togga/PlayerHTMLs/")
playerHTMLs = list.files(pattern = ".html")
allPlayerList = getIndividualPlayerTables(playerHTMLs)
source("Functions/predictScores.R")
setwd("C:/Users/Shaunus/Desktop/Togga/playtogga")
mostLikelyStatistics(pW2Glms)
source("Functions/predictScores.R")
mostLikelyStatistics(pW2Glms)
read.csv("Data/eventScores.csv", row.names = 1)
eventScores = read.csv("Data/eventScores.csv", row.names = 1)
save(eventScores, file = "Data/eventScores.RData")
load("Data/eventScores.RData")
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
load("Functions/calculateBytoggaScores.R")
source("Functions/calculateBytoggaScores.R")
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
qqScoresList = getPlayerQuantitles(pW2Glms, pW2, quantitles = c(10,50,90))
source("Functions/getPlayerQuantitles.R")
qqScoresList = getPlayerQuantitles(pW2Glms, pW2, quantitles = c(10,50,90))
qqScoresList$Q50
source("Functions/calculateBytoggaScores.R")
load("Data/eventScores.RData")
do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores))
t(do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores)))
source("Functions/calculateBytoggaScores.R")
load("Data/eventScores.RData")
t(do.call(rbind, calculateBytoggaScores(qqScoresList, eventScores)))
qqScoresList = getPlayerQuantiles(pW2Glms, allPlayerWk1_2, quantiles = seq(0,100,5))
source("Functions/getPlayerQuantiles.R")
qqScoresList = getPlayerQuantiles(pW2Glms, allPlayerWk1_2, quantiles = seq(0,100,5))
source("Functions/predictScores.R")
qqScoresList = getPlayerQuantiles(pW2Glms, allPlayerWk1_2, quantiles = seq(0,100,5))
qqScoresList
qqScoresList = getPlayerQuantiles(pW2Glms, allPlayerWk1_2, quantiles = seq(1,99, length = 50))
aa = calculateBytoggaScores(qqScoresList, eventScores)
aa
source("Functions/calculateBytoggaScores.R")
aa = calculateBytoggaScores(qqScoresList, eventScores)
aa
MinMax = range(aa)
MinMax
matplot(aa)
matplot(aa, type = "l")
matplot(t(aa), type = "l")
hist(aa[1,])
aa = t(calculateBytoggaScores(qqScoresList, eventScores))
plot(density(aa[,1], "SJ"))
?density
plot(density(aa[,1], "SJ", adjust = 2))
plot(density(aa[,1], "SJ", adjust = 3))
aa
aa.dens = lapply(1:ncol(aa), function(x) plot(density(aa[,x], "SJ", adjust = 2)))
aa[,1]
hist(aa[,1])
hist(aa[,1], probability = T)
?hist
plot(density(aa[,1], "SJ", adjust = 2))
hist(aa[,2])
plot(density(aa[,2], "SJ", adjust = 2))
plot(density(aa[,2], "SJ", adjust = 5))
plot(density(aa[,2]))
plot(density(aa[,2], adjust = 2))
hist(aa[,3])
plot(density(aa[,3], adjust = 2))
aa.dens = lapply(1:ncol(aa), function(x) density(aa[,x], adjust = 1))
aa.dens[[1]]
plot(x = c(-10,30), y = c(0,5))
plot(x = c(-10,30), y = c(0,5), type = "n")
for(i in 1:length(aa.dens)){  lines(y = aa.dens[[i]]$y, x = aa.dens[[i]]$x) }
plot(x = c(-10,30), y = c(0,2), type = "n")
for(i in 1:length(aa.dens)){  lines(y = aa.dens[[i]]$y, x = aa.dens[[i]]$x) }
plot(x = c(-10,20), y = c(0,2), type = "n")
for(i in 1:length(aa.dens)){  lines(y = aa.dens[[i]]$y, x = aa.dens[[i]]$x) }
?densityplot()
aa
aa = data.frame(t(calculateBytoggaScores(qqScoresList, eventScores)))
aa.stack = stack(aa)
View(aa.stack)
aa.stack$QQ = row.names(aa)
densityplot(values ~ hits | ind, data = aa.stack)
densityplot(values ~ QQ | ind, data = aa.stack)
str(aa.stack)
summary(aa.stack)
densityplot(values ~ QQ, data = aa.stack)
densityplot(values, data = aa.stack)
str(aa.stack)
densityplot(~values, data = aa.stack)
densityplot(~values | ind, data = aa.stack)
densityplot(~values | ind, data = aa.stack,
panel = function(...){ panel.densityplot(..., type = "l")}
)
densityplot(~values | ind, data = aa.stack,
panel = function(...){ panel.densityplot(..., type = "l")},
scales = list(relation = "free"))
aa
bb = aa[,1:5]
aa.stack = stack(bb)
aa.stack$QQ = row.names(aa)
str(aa.stack)
summary(aa.stack)
densityplot(~values | ind, data = aa.stack,
panel = function(...){ panel.densityplot(..., type = "l")},
scales = list(relation = "free"))
?panel.densityplot
densityplot(~values | ind, data = aa.stack,
panel = function(...){ panel.densityplot(..., type = "l", plot.points = NULL)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = "rug")},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F, adjust = 2)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F, darg(list(adjust = 2)))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F, darg = list(adjust = 2)))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F, darg = list(adjust = 2))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
darg = list(adjust = 2),
panel = function(...){
panel.densityplot(..., type = "l", plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., darg = list(), type = "l", plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., darg = list(adjust = 2)){
panel.densityplot(..., type = "l", plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., darg = list(adjust = 1)){
panel.densityplot(..., type = "l", plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., type = "l", darg = list(adjust = 1)){
panel.densityplot(..., plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., type = "p", darg = list(adjust = 1)){
panel.densityplot(..., plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., darg = list(adjust = 1)){
panel.densityplot(..., plot.points = F, type = "p")},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(..., darg = list(adjust = 1)){
panel.densityplot(..., plot.points = F)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...,){
panel.densityplot(..., plot.points = F, darg = list(adjust = 1))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., plot.points = F, darg = list(adjust = 1))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., plot.points = F, adjust = 1)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., plot.points = F, adjust = .1)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(...){
panel.densityplot(..., plot.points = F, adjust = 5)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(){
panel.densityplot(plot.points = F, adjust = 5)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5)},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list())},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 2))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))},
scales = list(relation = "free"))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))},
scales = list(y = list(relation = "free")))
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))},
scales = list(y = list(relation = "free"), x = list(limits = c(-5,30))))
bb = aa[,1:10]
aa.stack = stack(bb)
aa.stack$QQ = row.names(aa)
densityplot(~values | ind, data = aa.stack,
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))},
scales = list(y = list(relation = "free"), x = list(limits = c(-5,30))))
densityplot(~values | ind, data = aa.stack,
layout = c(2,5),
scales = list(alternating = F,
y = list(relation = "free"),
x = list(limits = c(-5,30))),
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
})
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
densityplot(~values | ind, data = aa.stack,
layout = c(2,5),
scales = list(alternating = F,
y = list(relation = "free", rot = 90),
x = list(limits = c(-5,30))),
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
})
densityplot(~values | ind, data = aa.stack,
layout = c(2,5),
scales = list(alternating = F,
y = list(relation = "free", rot = 180),
x = list(limits = c(-5,30))),
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
})
densityplot(~values | ind, data = aa.stack,
layout = c(2,5),
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(limits = c(-5,30))),
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
})
densityplot(~values | ind, data = aa.stack,
layout = c(2,5), between = list(y = 0.5),
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(limits = c(-5,30))),
panel = function(x){
panel.densityplot(x,plot.points = F, adjust = 5,darg = list(adjust = 1.5))
})
?panel.densityplot
qqScoresList = getPlayerQuantiles(pW2Glms, allPlayerWk1_2, quantiles = seq(1,99, length = 50))
playerScores = data.frame(t(calculateBytoggaScores(qqScoresList, eventScores)))
playerScores = playerScores[, 1:5]
playerScores.stack = stack(playerScores)
playerScores.stack$QQ = row.names(playerScores)
densityplot(~values | ind, data = playerScores.stack,
layout = c(5,2), between = list(y = 0.5),
xlab = "Predicted points", ylab = "Likelihood density",
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(relation = "free", rot = 90)), #limits = c(-10,30))),
panel = function(x){
panel.densityplot(x, plot.points = F, adjust = 5,darg = list(adjust = 1.5), lwd = 2)
})
panel.abline(v = 0, col = 2, lwd lwd = 2)
panel.abline(v = 0, col = 2, lwd = 2)
densityplot(~values | ind, data = playerScores.stack,
layout = c(5,2), between = list(y = 0.5),
xlab = "Predicted points", ylab = "Likelihood density",
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(relation = "free", rot = 90)), #limits = c(-10,30))),
panel = function(x){
panel.densityplot(x, plot.points = F, adjust = 5,darg = list(adjust = 1.5), lwd = 2)
panel.abline(v = 0, col = 2, lwd = 2)
})
playerScores = data.frame(t(calculateBytoggaScores(qqScoresList, eventScores)))
playerScores = playerScores[, 1:10]
playerScores.stack = stack(playerScores)
playerScores.stack$QQ = row.names(playerScores)
densityplot(~values | ind, data = playerScores.stack,
layout = c(5,2), between = list(y = 0.5),
xlab = "Predicted points", ylab = "Likelihood density",
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(relation = "free", rot = 90)), #limits = c(-10,30))),
panel = function(x){
panel.densityplot(x, plot.points = F, adjust = 5,darg = list(adjust = 1.5), lwd = 2)
panel.abline(v = 0, col = 2, lwd = 1)
})
densityplot(~values | ind, data = playerScores.stack,
layout = c(5,2), between = list(y = 0.5),
xlab = "Predicted points", ylab = "Likelihood density",
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(relation = "free", rot = 90)), #limits = c(-10,30))),
panel = function(x){
panel.densityplot(x, plot.points = F, adjust = 5,darg = list(adjust = 1.5), lwd = 2)
panel.abline(v = 0, col = "grey70", lwd = 1.5, lty = 2)
})
densityplot(~values | ind, data = playerScores.stack,
layout = c(5,2), between = list(y = 0.5),
xlab = "Predicted points", ylab = "Likelihood density",
scales = list(alternating = F,
y = list(relation = "free", rot = 0),
x = list(relation = "free", rot = 90)), #limits = c(-10,30))),
panel = function(x){
panel.densityplot(x, plot.points = F, adjust = 5,darg = list(adjust = 1.5), lwd = 2)
panel.abline(v = 0, col = "grey50", lwd = 1.5, lty = 2)
})
